{"version":3,"sources":["useForm.js","validateForm.js","App.js","serviceWorker.js","index.js"],"names":["useForm","callback","validateForm","useState","email","password","values","setValues","errors","setErrors","isSubmitting","setIsSubmitting","useEffect","Object","keys","length","handleChange","event","target","name","value","handleSubmit","preventDefault","test","App","console","log","className","onSubmit","noValidate","htmlFor","type","placeholder","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAoCeA,EAlCC,SAACC,EAAUC,GAAkB,IAAD,EACdC,mBAAS,CAAEC,MAAO,GAAIC,SAAU,KADlB,mBACnCC,EADmC,KAC3BC,EAD2B,OAEdJ,mBAAS,IAFK,mBAEnCK,EAFmC,KAE3BC,EAF2B,OAGFN,oBAAS,GAHP,mBAGnCO,EAHmC,KAGrBC,EAHqB,KA0B1C,OANAC,qBAAU,WAC2B,IAA/BC,OAAOC,KAAKN,GAAQO,QAAgBL,GACtCT,MAED,CAACO,IAEG,CACLQ,aAtBmB,SAACC,GAAW,IAAD,EACNA,EAAMC,OAAtBC,EADsB,EACtBA,KAAMC,EADgB,EAChBA,MAEdb,EAAU,eACLD,EADI,eAENa,EAAOC,MAkBVC,aAdmB,SAACJ,GACpBA,EAAMK,iBACNb,EAAUP,EAAaI,IACvBK,GAAgB,IAYhBL,SACAE,WChCW,SAASN,EAAaI,GACnC,IAAIE,EAAS,GAWb,OAVKF,EAAOF,QACA,eAAemB,KAAKjB,EAAOF,SACrCI,EAAOJ,MAAQ,6BAEZE,EAAOD,SAEDC,EAAOD,SAASU,OAAS,KAClCP,EAAOH,SAAW,+CAFlBG,EAAOH,SAAW,uBAKbG,ECyCMgB,MAhDf,WAAgB,IAAD,EAC0CxB,GAKvD,WACEyB,QAAQC,IAAI,4BAJZxB,GAFMc,EADK,EACLA,aAAcK,EADT,EACSA,aAAcf,EADvB,EACuBA,OAAQE,EAD/B,EAC+BA,OAS5C,OACE,yBAAKmB,UAAU,WACb,yBAAKA,UAAU,gBACb,8CACA,0BAAMC,SAAUP,EAAcQ,YAAU,GACtC,yBAAKF,UAAU,SACb,2BAAOG,QAAQ,SAAf,SACA,2BACEH,UAAS,UAAKnB,EAAOJ,OAAS,cAC9Be,KAAK,QACLY,KAAK,QACLC,YAAY,QACZZ,MAAOd,EAAOF,MACd6B,SAAUjB,IAEXR,EAAOJ,OAAS,uBAAGuB,UAAU,SAASnB,EAAOJ,QAEhD,yBAAKuB,UAAU,YACb,2BAAOG,QAAQ,YAAf,aACA,2BACEH,UAAS,UAAKnB,EAAOJ,OAAS,cAC9Be,KAAK,WACLY,KAAK,WACLC,YAAY,WACZZ,MAAOd,EAAOD,SACd4B,SAAUjB,IAEXR,EAAOH,UAAY,uBAAGsB,UAAU,SAASnB,EAAOH,WAEnD,yBAAKsB,UAAU,iBACb,4BAAQI,KAAK,UAAb,uBCjCQG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.19d9f32a.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useForm = (callback, validateForm) => {\n  const [values, setValues] = useState({ email: \"\", password: \"\" });\n  const [errors, setErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setErrors(validateForm(values));\n    setIsSubmitting(true);\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && isSubmitting) {\n      callback();\n    }\n  }, [errors]);\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};\n\nexport default useForm;\n","export default function validateForm(values) {\n  let errors = {};\n  if (!values.email) {\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = \"Email address is invalid\";\n  }\n  if (!values.password) {\n    errors.password = \"Password is required\";\n  } else if (values.password.length < 10) {\n    errors.password = \"Password needs to be more than 8 characters\";\n  }\n\n  return errors;\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport useForm from \"./useForm\";\nimport validateForm from \"./validateForm\";\n\nfunction App() {\n  const { handleChange, handleSubmit, values, errors } = useForm(\n    submit,\n    validateForm\n  );\n\n  function submit() {\n    console.log(\"Submitted Successfully\");\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <div className=\"form-wrapper\">\n        <h1>Create Account</h1>\n        <form onSubmit={handleSubmit} noValidate>\n          <div className=\"email\">\n            <label htmlFor=\"email\">Email</label>\n            <input\n              className={`${errors.email && \"inputError\"}`}\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"Email\"\n              value={values.email}\n              onChange={handleChange}\n            />\n            {errors.email && <p className=\"error\">{errors.email}</p>}\n          </div>\n          <div className=\"password\">\n            <label htmlFor=\"password\">Password*</label>\n            <input\n              className={`${errors.email && \"inputError\"}`}\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              value={values.password}\n              onChange={handleChange}\n            />\n            {errors.password && <p className=\"error\">{errors.password}</p>}\n          </div>\n          <div className=\"createAccount\">\n            <button type=\"submit\">Create Account</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}